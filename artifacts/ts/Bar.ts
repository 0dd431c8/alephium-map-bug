/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as BarContractJson } from "../Bar.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace BarTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    doSomething: {
      params: CallContractParams<{ payer: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    doSomething: {
      params: SignExecuteContractMethodParams<{ payer: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<BarInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  at(address: string): BarInstance {
    return new BarInstance(address);
  }

  tests = {
    doSomething: async (
      params: Omit<
        TestContractParams<
          never,
          { payer: Address },
          { stuff?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null, { stuff?: Map<bigint, bigint> }>> => {
      return testMethod(this, "doSomething", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Bar = new Factory(
  Contract.fromJson(
    BarContractJson,
    "=6-1=1+c=11-1+d=48+7a7e0214696e73657274206174206d617020706174683a2000=10",
    "a56d8562699d1a47e81282e0ec043626ff03a4be01fb0d91324d0b4e0b0b360c",
    []
  )
);

// Use this class to interact with the blockchain
export class BarInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    stuff: new RalphMap<bigint, bigint>(Bar.contract, this.contractId, "stuff"),
  };

  async fetchState(): Promise<BarTypes.State> {
    return fetchContractState(Bar, this);
  }

  view = {
    doSomething: async (
      params: BarTypes.CallMethodParams<"doSomething">
    ): Promise<BarTypes.CallMethodResult<"doSomething">> => {
      return callMethod(
        Bar,
        this,
        "doSomething",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    doSomething: async (
      params: BarTypes.SignExecuteMethodParams<"doSomething">
    ): Promise<BarTypes.SignExecuteMethodResult<"doSomething">> => {
      return signExecuteMethod(Bar, this, "doSomething", params);
    },
  };
}
